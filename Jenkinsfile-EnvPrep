//Jenkinsfile para pipeline ‚Äúestable‚Äù
pipeline {
    agent any
    environment {
        FLUTTER_HOME = "/opt/flutter"
        ANDROID_SDK_ROOT = "/home/jenkins/Android/Sdk"
        ANDROID_HOME = "/home/jenkins/Android/Sdk"
        JAVA_HOME = "/usr/lib/jvm/java-17-openjdk-amd64"
        GRADLE_OPTS = '-Dorg.gradle.jvmargs="-Xmx1500m -XX:MaxMetaspaceSize=384m -XX:+HeapDumpOnOutOfMemoryError"' // Eliminado -Dorg.gradle.daemon=false para permitir el uso del daemon y la cach√©
        ORG_GRADLE_PROJECT_android_useAndroidX = 'true'
        GRADLE_USER_HOME = "${WORKSPACE}/.gradle"
    }
    stages {
        stage('Validar Proyecto Flutter') {
            steps {
                sh 'test -f pubspec.yaml || { echo "‚ùå No se encontr√≥ pubspec.yaml. ¬øProyecto Flutter correcto?"; exit 1; }'
            }
        }
        stage('Verificar Entorno y Memoria') {
            steps {
                echo 'Verificando entorno...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                    "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                    "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                    "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                    "PATH+JAVA=${JAVA_HOME}/bin"
                ]) {
                    sh '''
                        echo "PATH actual: $PATH"
                        which sdkmanager
                        sdkmanager --version
                        ls -la "$ANDROID_SDK_ROOT/platforms/"
                        ls -la "$ANDROID_SDK_ROOT/build-tools/"
                        ls -la "$ANDROID_SDK_ROOT/platform-tools/"
                        which flutter
                        flutter --version
                        which java
                        java --version
                        echo "Memoria disponible:"
                        free -h
                        echo "Espacio en disco:"
                        df -h .
                        echo "Swap configurada:"
                        cat /proc/swaps || true
                        (while true; do free -h; sleep 10; done) &
                        MEM_MONITOR_PID=$!
                    '''
                }
            }
        }
        stage('üßπ Limpiar Sistema') {
            steps {
                echo 'üßπ Eliminando procesos y cache Gradle previos...'
                sh '''
                    free -h
                    pkill -9 -f gradle || true
                    pkill -9 -f GradleDaemon || true
                    sleep 2
                    rm -rf .gradle/ build/.gradle/
                    free -h
                '''
            }
        }
        stage('Limpiar y Obtener Dependencias') {
            steps {
                withEnv(["PATH+FLUTTER=${FLUTTER_HOME}/bin"]) {
                    sh '''
                        flutter clean
                        flutter pub get
                        cat <<EOF > android/gradle.properties
org.gradle.daemon=false
org.gradle.jvmargs=-Xmx1500m -XX:MaxMetaspaceSize=384m -XX:+HeapDumpOnOutOfMemoryError
org.gradle.parallel=false
org.gradle.configureondemand=false
android.useAndroidX=true
android.enableJetifier=true
EOF
                        cat android/gradle.properties
                    '''
                }
            }
        }
        stage('üßº Limpieza Final y Recursos') {
            steps {
                sh '''
                    if [ -n "$MEM_MONITOR_PID" ] && kill -0 $MEM_MONITOR_PID 2>/dev/null; then
                        kill $MEM_MONITOR_PID >/dev/null 2>&1
                    fi
                    free -h
                '''
            }
        }
    }
    post {
        always {
            echo 'üèÅ Pipeline estable finalizado.'
            sh '''
                pkill -f gradle || true
                pkill -f GradleDaemon || true
                free -h
            '''
        }
    }
}
