name: "Flutter Environment for GitHub Copilot"

on:
  workflow_dispatch:
    inputs:
      flutter_version:
        description: 'Flutter version to use'
        required: false
        default: '3.32.8'
        type: string
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
      - pubspec.yaml
      - pubspec.lock
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml
      - pubspec.yaml
      - pubspec.lock

jobs:
  flutter-environment-setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    
    # Set environment variables that Copilot can reference
    env:
      FLUTTER_VERSION: ${{ github.event.inputs.flutter_version || '3.32.8' }}
      COPILOT_ENV: 'flutter-ready'
    
    steps:
      - name: üìÇ Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch more history for better context
          fetch-depth: 2

      - name: üîç Validate pubspec.yaml exists
        run: |
          if [ ! -f "pubspec.yaml" ]; then
            echo "‚ùå pubspec.yaml not found. This doesn't appear to be a Flutter project."
            exit 1
          fi
          echo "‚úÖ Flutter project detected"

      - name: üê¶ Setup Flutter Environment
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-${{ env.FLUTTER_VERSION }}-${{ runner.os }}'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:'
          architecture: x64

      - name: üì¶ Get Flutter Dependencies
        run: |
          echo "Installing Flutter dependencies..."
          flutter pub get
          
          # Verify dependencies were installed
          if [ -d ".dart_tool" ]; then
            echo "‚úÖ Dependencies installed successfully"
          else
            echo "‚ùå Failed to install dependencies"
            exit 1
          fi

      # ELIMINADO: Accept Android SDK Licenses (puede tomar tiempo)
      # ELIMINADO: Flutter Doctor Diagnosis (puede ser lento)
      # ELIMINADO: Format Dart Code (no esencial para setup)
      # ELIMINADO: Analyze Flutter Code (puede fallar y ser lento)
      # ELIMINADO: Run Flutter Tests (LA CAUSA PRINCIPAL - tests da√±ados)
      # ELIMINADO: Test Build Android APK (puede ser muy lento)

      - name: üìã Environment Summary
        run: |
          echo "üéâ Flutter Environment Setup Complete!"
          echo "=================================="
          echo "Flutter Version: $(flutter --version | head -1)"
          echo "Dart Version: $(dart --version)"
          echo "Environment: ${{ env.COPILOT_ENV }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "=================================="
          
          # Create environment file for Copilot reference
          cat > copilot-env-info.txt << EOF
          FLUTTER_READY=true
          FLUTTER_VERSION=${{ env.FLUTTER_VERSION }}
          DART_VERSION=$(dart --version 2>&1 | cut -d' ' -f4)
          SETUP_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          PROJECT_TYPE=Flutter
          DEPENDENCIES_INSTALLED=true
          TESTS_AVAILABLE=$([ -d "test" ] && echo "true" || echo "false")
          EOF
          
          echo "üìÑ Environment info saved to copilot-env-info.txt"

      - name: üîß Cache Flutter Build Files
        uses: actions/cache@v4
        with:
          path: |
            build
            .dart_tool
          key: ${{ runner.os }}-flutter-build-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-build-

  # Job to notify about environment status
  notify-copilot:
    needs: flutter-environment-setup
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: üì¢ Environment Status
        run: |
          if [ "${{ needs.flutter-environment-setup.result }}" == "success" ]; then
            echo "‚úÖ Flutter environment is ready for GitHub Copilot!"
            echo "ü§ñ You can now ask Copilot to:"
            echo "   - Analyze Flutter/Dart code"
            echo "   - Run flutter commands"
            echo "   - Execute tests (manually when fixed)"
            echo "   - Build the project"
          else
            echo "‚ùå Flutter environment setup failed"
            echo "üîß Check the logs above for issues"
          fi
