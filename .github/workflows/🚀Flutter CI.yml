# Configuración CI más exitosa basada en casos reales de la comunidad
name: 🚀Flutter CI 

# Se ejecuta en PRs y pushes a main/develop
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to test (leave empty for current)'
        required: false
        default: ''
      auto_format:
        description: 'Auto-format code if needed'
        required: false
        default: true
        type: boolean

jobs:
  # Job 1: Análisis estático, formateo y limpieza de imports
  analyze:
    name: 📊 Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      # Formateo automático, igual que tu lógica actual
      - name: 🎨 Check and auto-format code
        run: |
          echo "🎨 Checking Dart code formatting..."
          
          # Check if formatting is needed
          if ! dart format --set-exit-if-changed . 2>/dev/null; then
            echo "📝 Formatting issues detected!"
            
            # Auto-format if enabled via input parameter
            if [ "${{ github.event.inputs.auto_format }}" = "true" ]; then
              echo "🔧 Auto-formatting enabled. Applying fixes..."
              
              # Format the code
              dart format .
              
              # Configure git
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action [bot]"
              
              # Check if there are changes after formatting
              if ! git diff --quiet; then
                echo "📋 Files that were formatted:"
                git diff --name-only
                
                # Add and commit the changes
                git add .
                git commit -m "🎨 Auto-format code with dart format [skip ci]" 
                # Push the changes
                git push
                
                echo "✅ Code has been automatically formatted and committed!"
                echo "🔄 Contributors should pull the latest changes."
                
                # Add a summary
                echo "## 🎨 Auto-Format Summary" >> $GITHUB_STEP_SUMMARY
                echo "✅ Code formatting issues were automatically fixed" >> $GITHUB_STEP_SUMMARY
                echo "📝 Files formatted:" >> $GITHUB_STEP_SUMMARY
                git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "🔄 **Action Required**: Pull the latest changes to your local branch:" >> $GITHUB_STEP_SUMMARY
                echo '```bash' >> $GITHUB_STEP_SUMMARY
                echo "git pull origin ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              else
                echo "ℹ️ No changes were needed after formatting."
              fi
            else
              echo "❌ Auto-formatting is disabled. Please format manually:"
              echo ""
              echo "Files that need formatting:"
              dart format --show-all .
              echo ""
              echo "To fix these issues, run:"
              echo "  dart format ."
              echo ""
              echo "Or trigger this workflow with auto-format enabled."
              exit 1
            fi
          else
            echo "✅ All files are already properly formatted!"
          fi

      # NUEVO: Limpieza automática de imports antes del análisis estático
      - name: 🧹 Remove unused imports (dart fix)
        run: |
          echo "🧹 Eliminando imports no usados y aplicando fixes automáticos..."
          dart fix --apply

          # Si hubo cambios, commitear y pushear igual que con el formateo
          if ! git diff --quiet; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action [bot]"
            git add .
            git commit -m "🧹 Remove unused imports and auto-fix code [skip ci]"
            git push
            echo "✅ Imports limpios y fixes aplicados!"
            echo "## 🧹 Import Cleanup Summary" >> $GITHUB_STEP_SUMMARY
            echo "✅ Unused imports and automatic fixes were applied." >> $GITHUB_STEP_SUMMARY
            echo "📝 Files fixed:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔄 **Action Required**: Pull the latest changes to your local branch:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "git pull origin ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No unused imports or fixes applied."
          fi

      - name: 🔍 Analyze code
        run: flutter analyze --fatal-infos

      - name: 📋 Check pub.dev score
        run: dart pub deps

  # Job 2: Testing (paralelo al análisis)
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🧪 Run unit tests
        run: flutter test --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

      - name: 📈 Generate coverage report
        run: |
          # Instalar lcov si no existe
          sudo apt-get update
          sudo apt-get install -y lcov
          
          # Generar reporte HTML
          genhtml coverage/lcov.info -o coverage/html
          
          # Mostrar resumen en logs
          lcov --summary coverage/lcov.info

      - name: 📋 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # Job 3: Build (solo si tests pasan)
  build:
    name: 🏗️ Build Apps
    runs-on: ubuntu-latest
    needs: [analyze, test]  # Solo ejecuta si análisis y tests pasan
    
    strategy:
      matrix:
        include:
          - platform: android
            build-cmd: flutter build apk --debug
            artifact-path: build/app/outputs/flutter-apk/app-debug.apk
            artifact-name: android-apk
          
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java (for Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🏗️ Build ${{ matrix.platform }}
        run: ${{ matrix.build-cmd }}

      - name: 📤 Upload ${{ matrix.platform }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          retention-days: 30

  # Job 4: Comentario en PR con resultados
  comment:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    needs: [analyze, test, build]
    if: github.event_name == 'pull_request' && always()
    
    steps:
      - name: 📥 Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
        continue-on-error: true

      - name: 💬 Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check job statuses
            const analyzeStatus = '${{ needs.analyze.result }}';
            const testStatus = '${{ needs.test.result }}';
            const buildStatus = '${{ needs.build.result }}';
            
            const getStatusEmoji = (status) => {
              switch (status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '🔄';
              }
            };
            
            // Leer coverage si existe
            let coverageInfo = 'Coverage info not available';
            try {
              const files = fs.readdirSync('.');
              if (fs.existsSync('lcov.info')) {
                coverageInfo = '📊 Coverage report generated successfully';
              }
            } catch (e) {
              console.log('Error reading coverage:', e.message);
            }
            
            const autoFormatEnabled = '${{ github.event.inputs.auto_format }}' === 'true';
            const formatNote = autoFormatEnabled ? '🎨 Auto-format: Enabled' : '⚠️ Auto-format: Disabled';
            
            const comment = `## 🎉 CI Results for PR #${{ github.event.number }}
            
            ${getStatusEmoji(analyzeStatus)} **Static Analysis**: ${analyzeStatus}
            ${getStatusEmoji(testStatus)} **Tests**: ${testStatus}  
            ${getStatusEmoji(buildStatus)} **Build**: ${buildStatus}
            
            ${formatNote}
            ${coverageInfo}
            
            ### 📦 Artifacts Available:
            ${buildStatus === 'success' ? '- 📱 Android APK\n- 🌐 Web Build' : 'No artifacts (build failed)'}
            
            ### ${analyzeStatus === 'success' && testStatus === 'success' && buildStatus === 'success' ? '🚀 Ready to merge!' : '⚠️ Issues found - check the logs'}
            
            ${analyzeStatus === 'failure' && !autoFormatEnabled ? '\n💡 **Tip**: Enable auto-format when running the workflow to automatically fix formatting issues!' : ''}
            
            ---
            *Generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 5: Security scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
