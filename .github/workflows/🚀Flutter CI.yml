name: 🚀Flutter CI

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to test (leave empty for current)'
        required: false
        default: ''
      auto_format:
        description: 'Auto-format code if needed'
        required: false
        default: true
        type: boolean
      build_signed:
        description: 'Build signed App Bundle (requires secrets)'
        required: false
        default: false
        type: boolean

  pull_request:
    branches: [ "main", "develop" ]

jobs:
  analyze:
    name: 📊 Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📋 Show execution context
        run: |
          echo "🚀 Flutter CI Execution Info"
          echo "📦 Target Branch: ${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}"
          echo "🔧 Event: ${{ github.event_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📅 Timestamp: $(date)"
          
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}

      - name: 📋 Verify branch checkout
        run: |
          echo "✅ Current branch: $(git branch --show-current)"
          echo "📝 Latest commit: $(git log -1 --oneline)"
          echo "👤 Commit author: $(git log -1 --pretty=format:'%an <%ae>')"
          echo "📅 Commit date: $(git log -1 --pretty=format:'%ad')"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🎨 Check and auto-format code
        run: |
          echo "🎨 Checking Dart code formatting..."
          if ! dart format --set-exit-if-changed . 2>/dev/null; then
            echo "📝 Formatting issues detected!"
            if [ "${{ github.event.inputs.auto_format }}" = "true" ]; then
              echo "🔧 Auto-formatting enabled. Applying fixes..."
              dart format .
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action [bot]"
              if ! git diff --quiet; then
                echo "📋 Files that were formatted:"
                git diff --name-only
                git add .
                
                # Determinar la rama correcta para el push
                TARGET_BRANCH="${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}"
                git commit -m "🎨 Auto-format code with dart format [skip ci]"
                
                # Push con manejo de errores
                if git push origin "$TARGET_BRANCH" 2>/dev/null; then
                  echo "✅ Code has been automatically formatted and committed!"
                else
                  echo "⚠️ Could not push formatting changes. This may be normal for PR branches."
                  echo "📝 Formatting applied locally for this run."
                fi
                
                echo "🔄 Contributors should pull the latest changes."
                echo "## 🎨 Auto-Format Summary" >> $GITHUB_STEP_SUMMARY
                echo "✅ Code formatting issues were automatically fixed" >> $GITHUB_STEP_SUMMARY
                echo "📝 Files formatted:" >> $GITHUB_STEP_SUMMARY
                git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "🔄 **Action Required**: Pull the latest changes to your local branch:" >> $GITHUB_STEP_SUMMARY
                echo '```bash' >> $GITHUB_STEP_SUMMARY
                echo "git pull origin $TARGET_BRANCH" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              else
                echo "ℹ️ No changes were needed after formatting."
              fi
            else
              echo "❌ Auto-formatting is disabled. Please format manually:"
              echo ""
              echo "Files that need formatting:"
              dart format --show-all .
              echo ""
              echo "To fix these issues, run:"
              echo "  dart format ."
              echo ""
              echo "Or trigger this workflow with auto-format enabled."
              exit 1
            fi
          else
            echo "✅ All files are already properly formatted!"
          fi

      - name: 🧹 Remove unused imports (dart fix)
        run: |
          echo "🧹 Eliminando imports no usados y aplicando fixes automáticos..."
          dart fix --apply
          if ! git diff --quiet; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action [bot]"
            git add .
            
            # Determinar la rama correcta para el push
            TARGET_BRANCH="${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}"
            git commit -m "🧹 Remove unused imports and auto-fix code [skip ci]"
            
            # Push con manejo de errores
            if git push origin "$TARGET_BRANCH" 2>/dev/null; then
              echo "✅ Imports limpios y fixes aplicados!"
            else
              echo "⚠️ Could not push import cleanup. This may be normal for PR branches."
              echo "📝 Import cleanup applied locally for this run."
            fi
            
            echo "## 🧹 Import Cleanup Summary" >> $GITHUB_STEP_SUMMARY
            echo "✅ Unused imports and automatic fixes were applied." >> $GITHUB_STEP_SUMMARY
            echo "📝 Files fixed:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔄 **Action Required**: Pull the latest changes to your local branch:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "git pull origin $TARGET_BRANCH" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No unused imports or fixes applied."
          fi

      - name: 🔍 Analyze code
        run: flutter analyze --fatal-infos

      - name: 📋 Check pub.dev score
        run: dart pub deps

  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/pubspec.lock
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🧪 Run unit tests
        run: flutter test --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

      - name: 📈 Generate coverage report
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov
          genhtml coverage/lcov.info -o coverage/html
          lcov --summary coverage/lcov.info

      - name: 📋 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  build:
    name: 🏗️ Build Apps
    runs-on: ubuntu-latest
    needs: [analyze, test]

    strategy:
      matrix:
        include:
          - platform: android-debug
            build-cmd: flutter build apk --debug
            artifact-path: build/app/outputs/flutter-apk/app-debug.apk
            artifact-name: android-apk-debug

          - platform: android-bundle
            build-cmd: flutter build appbundle --release
            artifact-path: build/app/outputs/bundle/release/app-release.aab
            artifact-name: android-app-bundle

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}

      - name: 📋 Verify build branch
        run: |
          echo "🏗️ Building from branch: $(git branch --show-current)"
          echo "📝 Building commit: $(git log -1 --oneline)"
          echo "📅 Commit date: $(git log -1 --pretty=format:'%ad')"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📦 Get dependencies
        run: flutter pub get

      - name: 🔐 Setup Android signing (for App Bundle)
        if: matrix.platform == 'android-bundle' && (github.event.inputs.build_signed == 'true' || github.ref == 'refs/heads/main')
        run: |
          echo "🔐 Setting up Android signing configuration..."
          mkdir -p android
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystore.jks
          cat << EOF > android/key.properties
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore.jks
          EOF
          echo "✅ Android signing configured successfully!"

      - name: 🏗️ Build ${{ matrix.platform }}
        run: |
          if [[ "${{ matrix.platform }}" == "android-bundle" && -f "android/key.properties" ]]; then
            echo "🏗️ Building signed App Bundle..."
            ${{ matrix.build-cmd }}
          elif [[ "${{ matrix.platform }}" == "android-bundle" ]]; then
            echo "⚠️ Building unsigned App Bundle (signing keys not available)"
            flutter build appbundle --release
          else
            echo "🏗️ Building ${{ matrix.platform }}..."
            ${{ matrix.build-cmd }}
          fi

      - name: 📋 Verify build output
        run: |
          if [ -f "${{ matrix.artifact-path }}" ]; then
            echo "✅ Build successful: ${{ matrix.artifact-path }}"
            ls -la "${{ matrix.artifact-path }}"
            if [[ "${{ matrix.platform }}" == "android-bundle" ]]; then
              echo "📦 App Bundle details:"
              file "${{ matrix.artifact-path }}"
              if [ -f "android/key.properties" ]; then
                echo "🔐 Verifying App Bundle signature..."
                echo "App Bundle is signed and ready for Play Store!"
              fi
            fi
          else
            echo "❌ Build failed: ${{ matrix.artifact-path }} not found"
            exit 1
          fi

      - name: 🧹 Sanitize branch name for artifact
        run: |
          BRANCH_NAME="${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}"
          CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[\/:"<>|*?\\]/-/g')
          echo "CLEAN_BRANCH_NAME=$CLEAN_BRANCH_NAME" >> $GITHUB_ENV
          echo "✅ Original branch: $BRANCH_NAME"
          echo "✅ Sanitized branch: $CLEAN_BRANCH_NAME"

      - name: 📤 Upload ${{ matrix.platform }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-${{ env.CLEAN_BRANCH_NAME }}-${{ github.run_number }}
          path: ${{ matrix.artifact-path }}
          retention-days: 30

      - name: 🧹 Cleanup sensitive files
        if: matrix.platform == 'android-bundle' && always()
        run: |
          echo "🧹 Cleaning up sensitive files..."
          rm -f android/keystore.jks
          rm -f android/key.properties
          echo "✅ Cleanup completed"

  comment:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    needs: [analyze, test, build]
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: 📥 Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
        continue-on-error: true

      - name: 💬 Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analyzeStatus = '${{ needs.analyze.result }}';
            const testStatus = '${{ needs.test.result }}';
            const buildStatus = '${{ needs.build.result }}';
            const targetBranch = '${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}';
            
            const getStatusEmoji = (status) => {
              switch (status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '🔄';
              }
            };
            
            let coverageInfo = 'Coverage info not available';
            try {
              const files = fs.readdirSync('.');
              if (fs.existsSync('lcov.info')) {
                coverageInfo = '📊 Coverage report generated successfully';
              }
            } catch (e) {
              console.log('Error reading coverage:', e.message);
            }
            
            const autoFormatEnabled = '${{ github.event.inputs.auto_format }}' === 'true';
            const formatNote = autoFormatEnabled ? '🎨 Auto-format: Enabled' : '⚠️ Auto-format: Disabled';
            const buildSigned = '${{ github.event.inputs.build_signed }}' === 'true';
            const signingNote = buildSigned ? '🔐 Signed builds: Enabled' : '⚠️ Signed builds: Disabled';
            
            const comment = `## 🎉 CI Results for PR #${{ github.event.number }}
            
            **📦 Tested Branch**: \`${targetBranch}\`
            
            ${getStatusEmoji(analyzeStatus)} **Static Analysis**: ${analyzeStatus}
            ${getStatusEmoji(testStatus)} **Tests**: ${testStatus}  
            ${getStatusEmoji(buildStatus)} **Build**: ${buildStatus}
            
            ${formatNote}
            ${signingNote}
            ${coverageInfo}
            
            ### 📦 Artifacts Available:
            ${buildStatus === 'success' ? '- 📱 Android APK (Debug)\n- 📦 Android App Bundle (Release)' : 'No artifacts (build failed)'}
            
            ### ${analyzeStatus === 'success' && testStatus === 'success' && buildStatus === 'success' ? '🚀 Ready to merge!' : '⚠️ Issues found - check the logs'}
            
            ${analyzeStatus === 'failure' && !autoFormatEnabled ? '\n💡 **Tip**: Enable auto-format when running the workflow to automatically fix formatting issues!' : ''}
            
            ${buildStatus === 'success' && !buildSigned ? '\n🔐 **Note**: To generate signed App Bundle, enable "Build signed App Bundle" option when running manually.' : ''}
            
            ---
            *Generated by GitHub Actions - Build #${{ github.run_number }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || github.head_ref || github.ref_name }}

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job adicional para información de rama (cuando es workflow_dispatch)
  branch-info:
    name: 📋 Branch Information
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.target_branch != ''

    steps:
      - name: 📥 Checkout target branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch }}

      - name: 🔍 Branch analysis
        run: |
          echo "## 🔍 Branch Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          
          # Información de la rama actual
          echo "### 📋 Target Branch: \`$TARGET_BRANCH\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest commit**: \`$(git log -1 --oneline)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: \`$(git log -1 --pretty=format:'%an')\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: \`$(git log -1 --pretty=format:'%ad' --date=short)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Total commits**: \`$(git rev-list --count HEAD)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Comparación con main si no es main
          if [ "$TARGET_BRANCH" != "main" ]; then
            echo "### 🔄 Comparison with main:" >> $GITHUB_STEP_SUMMARY
            
            # Obtener main para comparar
            git fetch origin main:refs/remotes/origin/main 2>/dev/null || echo "Could not fetch main"
            
            if git show-ref --verify --quiet refs/remotes/origin/main; then              
              # Commits ahead/behind
              AHEAD=$(git rev-list --count origin/main..$TARGET_BRANCH 2>/dev/null || echo "N/A")
              BEHIND=$(git rev-list --count $TARGET_BRANCH..origin/main 2>/dev/null || echo "N/A")
              
              echo "- **Commits ahead of main**: $AHEAD" >> $GITHUB_STEP_SUMMARY
              echo "- **Commits behind main**: $BEHIND" >> $GITHUB_STEP_SUMMARY
              
              # Últimos commits únicos en esta rama
              if [ "$AHEAD" != "N/A" ] && [ "$AHEAD" -gt "0" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 📝 Recent commits in \`$TARGET_BRANCH\`:" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                git log --oneline origin/main..$TARGET_BRANCH --max-count=5 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "No unique commits found" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- ⚠️ Could not compare with main branch" >> $GITHUB_STEP_SUMMARY
            fi
          fi
