name: 🧪Flutter Test Optimizer

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to optimize tests (leave empty for current)'
        required: false
        default: ''
        type: string
      auto_fix_tests:
        description: 'Auto-fix test issues and commit changes'
        required: false
        default: true
        type: boolean
      run_performance_analysis:
        description: 'Analyze test performance and report slow tests'
        required: false
        default: true
        type: boolean

jobs:
  test-optimizer:
    name: 🧪 Test Optimization & Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Show test optimization info
        run: |
          echo "🧪 Flutter Test Optimizer"
          echo "📦 Target Branch: ${{ github.event.inputs.target_branch || github.ref_name }}"
          echo "🔧 Auto-fix enabled: ${{ github.event.inputs.auto_fix_tests || 'true' }}"
          echo "📊 Performance analysis: ${{ github.event.inputs.run_performance_analysis || 'true' }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "📅 Timestamp: $(date)"

      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || github.ref_name }}

      - name: 📋 Verify test branch checkout
        run: |
          echo "✅ Current branch: $(git branch --show-current)"
          echo "📝 Latest commit: $(git log -1 --oneline)"
          echo "👤 Commit author: $(git log -1 --pretty=format:'%an <%ae>')"
          echo "📅 Commit date: $(git log -1 --pretty=format:'%ad')"
          echo ""
          echo "🧪 Test directory analysis:"
          if [ -d "test/" ]; then
            echo "📁 Test files found: $(find test/ -name "*.dart" | wc -l)"
            echo "📋 Test structure:"
            find test/ -name "*.dart" | head -10
          else
            echo "❌ No test directory found!"
            exit 1
          fi

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔧 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: 📊 Flutter doctor for tests
        run: flutter doctor -v

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🧹 Pre-optimization analysis
        run: |
          echo "## 🔍 Pre-Optimization Test Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Contar archivos de test
          TEST_FILES=$(find test/ -name "*.dart" | wc -l)
          echo "📁 **Total test files**: $TEST_FILES" >> $GITHUB_STEP_SUMMARY
          
          # Analizar imports en tests
          echo "🔍 **Analyzing test imports...**" >> $GITHUB_STEP_SUMMARY
          UNUSED_IMPORTS=$(find test/ -name "*.dart" -exec grep -l "^import" {} \; | wc -l)
          echo "📋 Files with imports: $UNUSED_IMPORTS" >> $GITHUB_STEP_SUMMARY
          
          # Detectar patterns comunes
          echo "🎯 **Common test patterns detected**:" >> $GITHUB_STEP_SUMMARY
          TESTWIDGET_COUNT=$(find test/ -name "*.dart" -exec grep -l "testWidgets" {} \; | wc -l)
          UNITTEST_COUNT=$(find test/ -name "*.dart" -exec grep -l "test(" {} \; | wc -l)
          GROUP_COUNT=$(find test/ -name "*.dart" -exec grep -l "group(" {} \; | wc -l)
          
          echo "- Widget tests: $TESTWIDGET_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests: $UNITTEST_COUNT" >> $GITHUB_STEP_SUMMARY  
          echo "- Test groups: $GROUP_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🎨 Auto-format test files
        run: |
          echo "🎨 Formatting test files..."
          if ! dart format --set-exit-if-changed test/ 2>/dev/null; then
            echo "📝 Test formatting issues detected!"
            if [ "${{ github.event.inputs.auto_fix_tests }}" = "true" ]; then
              echo "🔧 Auto-fixing test formatting..."
              dart format test/
              echo "✅ Test files formatted!"
            else
              echo "⚠️ Auto-fix disabled. Test files need manual formatting."
            fi
          else
            echo "✅ All test files are properly formatted!"
          fi

      - name: 🧹 Optimize test imports and apply fixes
        run: |
          echo "🧹 Optimizing test files with dart fix..."
          
          # Aplicar fixes específicamente en la carpeta test
          dart fix --apply test/
          
          echo "📋 Checking what was fixed in tests..."
          if ! git diff --quiet test/; then
            echo "✅ Test optimizations applied!"
            echo "📝 Files modified in test directory:"
            git diff --name-only test/
            
            echo "🔍 Changes preview:"
            git diff --stat test/
          else
            echo "ℹ️ No automatic fixes needed in test files."
          fi

      - name: 🔍 Test analysis and linting
        run: |
          echo "🔍 Running analysis specifically on test files..."
          flutter analyze test/ --fatal-infos || echo "⚠️ Analysis found issues in tests"

      - name: 🧪 Run tests with detailed output
        if: github.event.inputs.run_performance_analysis == 'true'
        run: |
          echo "🧪 Running tests with performance analysis..."
          
          # Ejecutar tests con tiempo detallado
          START_TIME=$(date +%s)
          flutter test --reporter=expanded --coverage 2>&1 | tee test_output.log
          END_TIME=$(date +%s)
          TOTAL_TIME=$((END_TIME - START_TIME))
          
          echo "⏱️ Total test execution time: ${TOTAL_TIME}s"
          echo "TEST_EXECUTION_TIME=${TOTAL_TIME}" >> $GITHUB_ENV

      - name: 📊 Test performance analysis
        if: github.event.inputs.run_performance_analysis == 'true'
        run: |
          echo "📊 Analyzing test performance..."
          
          echo "## 📊 Test Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏱️ **Total execution time**: ${TEST_EXECUTION_TIME:-N/A}s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analizar output de tests para identificar lentos
          if [ -f "test_output.log" ]; then
            echo "🐌 **Potentially slow tests**:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            # Buscar patrones que indiquen tests lentos (más de 1000ms típicamente)
            grep -E "(took [0-9]{4,}ms|SKIP|FAIL)" test_output.log | head -10 >> $GITHUB_STEP_SUMMARY || echo "No slow tests detected" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage info si está disponible
          if [ -f "coverage/lcov.info" ]; then
            echo "📈 **Coverage generated successfully**" >> $GITHUB_STEP_SUMMARY
            COVERAGE_LINES=$(wc -l < coverage/lcov.info)
            echo "📋 Coverage file size: $COVERAGE_LINES lines" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔧 Commit test optimizations
        if: github.event.inputs.auto_fix_tests == 'true'
        run: |
          echo "🔧 Committing test optimizations..."
          
          if ! git diff --quiet; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action [bot]"
            
            echo "📋 Files that will be committed:"
            git diff --name-only
            
            git add .
            git commit -m "🧪 Auto-optimize test files: formatting, imports, and fixes [skip ci]"
            
            # Determinar la rama correcta para el push
            TARGET_BRANCH="${{ github.event.inputs.target_branch || github.ref_name }}"
            
            if git push origin "$TARGET_BRANCH" 2>/dev/null; then
              echo "✅ Test optimizations committed and pushed!"
              echo "🔄 Contributors should pull the latest changes."
              
              echo "## 🧪 Test Optimization Summary" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Automatic optimizations applied and committed**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "📝 **Files optimized**:" >> $GITHUB_STEP_SUMMARY
              git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔄 **Action Required**: Pull the latest changes to your local branch:" >> $GITHUB_STEP_SUMMARY
              echo '```bash' >> $GITHUB_STEP_SUMMARY
              echo "git pull origin $TARGET_BRANCH" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Could not push test optimizations. This may be normal for some branch types."
              echo "📝 Test optimizations applied locally for this analysis."
            fi
          else
            echo "ℹ️ No changes to commit - tests were already optimized."
          fi

      - name: 📋 Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-analysis-${{ github.event.inputs.target_branch || github.ref_name }}-${{ github.run_number }}
          path: |
            test_output.log
            coverage/
          retention-days: 7
        continue-on-error: true

      - name: 📝 Final test optimization report
        run: |
          echo "## 🎉 Test Optimization Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 What was analyzed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test file formatting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Import optimization" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Automatic dart fixes" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.run_performance_analysis }}" = "true" ]; then
            echo "- ✅ Performance analysis" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Test execution timing" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Settings used:" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.event.inputs.target_branch || github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-fix**: ${{ github.event.inputs.auto_fix_tests || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance analysis**: ${{ github.event.inputs.run_performance_analysis || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.auto_fix_tests }}" = "true" ]; then
            echo "💡 **Tip**: If changes were committed, remember to pull them to your local branch!" >> $GITHUB_STEP_SUMMARY
          else
            echo "💡 **Tip**: Enable auto-fix to automatically apply optimizations and commit them!" >> $GITHUB_STEP_SUMMARY
          fi
