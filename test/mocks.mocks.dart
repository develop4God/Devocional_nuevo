// Mocks generated by Mockito 5.4.6 from annotations
// in devocional_nuevo/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i11;
import 'dart:typed_data' as _i12;
import 'dart:ui' as _i3;

import 'package:devocional_nuevo/controllers/audio_controller.dart' as _i2;
import 'package:devocional_nuevo/models/devocional_model.dart' as _i6;
import 'package:devocional_nuevo/providers/devocional_provider.dart' as _i5;
import 'package:devocional_nuevo/providers/localization_provider.dart' as _i10;
import 'package:flutter/material.dart' as _i9;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioController_0 extends _i1.SmartFake
    implements _i2.AudioController {
  _FakeAudioController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_1 extends _i1.SmartFake implements _i3.Locale {
  _FakeLocale_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DevocionalProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevocionalProvider extends _i1.Mock
    implements _i5.DevocionalProvider {
  MockDevocionalProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Devocional> get devocionales => (super.noSuchMethod(
        Invocation.getter(#devocionales),
        returnValue: <_i6.Devocional>[],
      ) as List<_i6.Devocional>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  String get selectedLanguage => (super.noSuchMethod(
        Invocation.getter(#selectedLanguage),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#selectedLanguage),
        ),
      ) as String);

  @override
  String get selectedVersion => (super.noSuchMethod(
        Invocation.getter(#selectedVersion),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#selectedVersion),
        ),
      ) as String);

  @override
  List<_i6.Devocional> get favoriteDevocionales => (super.noSuchMethod(
        Invocation.getter(#favoriteDevocionales),
        returnValue: <_i6.Devocional>[],
      ) as List<_i6.Devocional>);

  @override
  bool get showInvitationDialog => (super.noSuchMethod(
        Invocation.getter(#showInvitationDialog),
        returnValue: false,
      ) as bool);

  @override
  bool get isDownloading => (super.noSuchMethod(
        Invocation.getter(#isDownloading),
        returnValue: false,
      ) as bool);

  @override
  bool get isOfflineMode => (super.noSuchMethod(
        Invocation.getter(#isOfflineMode),
        returnValue: false,
      ) as bool);

  @override
  _i2.AudioController get audioController => (super.noSuchMethod(
        Invocation.getter(#audioController),
        returnValue: _FakeAudioController_0(
          this,
          Invocation.getter(#audioController),
        ),
      ) as _i2.AudioController);

  @override
  bool get isAudioPlaying => (super.noSuchMethod(
        Invocation.getter(#isAudioPlaying),
        returnValue: false,
      ) as bool);

  @override
  bool get isAudioPaused => (super.noSuchMethod(
        Invocation.getter(#isAudioPaused),
        returnValue: false,
      ) as bool);

  @override
  int get currentReadingSeconds => (super.noSuchMethod(
        Invocation.getter(#currentReadingSeconds),
        returnValue: 0,
      ) as int);

  @override
  double get currentScrollPercentage => (super.noSuchMethod(
        Invocation.getter(#currentScrollPercentage),
        returnValue: 0.0,
      ) as double);

  @override
  List<String> get supportedLanguages => (super.noSuchMethod(
        Invocation.getter(#supportedLanguages),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get availableVersions => (super.noSuchMethod(
        Invocation.getter(#availableVersions),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isDevocionalPlaying(String? devocionalId) => (super.noSuchMethod(
        Invocation.method(
          #isDevocionalPlaying,
          [devocionalId],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String> getVersionsForLanguage(String? language) => (super.noSuchMethod(
        Invocation.method(
          #getVersionsForLanguage,
          [language],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i8.Future<void> initializeData() => (super.noSuchMethod(
        Invocation.method(
          #initializeData,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> playDevotional(_i6.Devocional? devocional) =>
      (super.noSuchMethod(
        Invocation.method(
          #playDevotional,
          [devocional],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> pauseAudio() => (super.noSuchMethod(
        Invocation.method(
          #pauseAudio,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> resumeAudio() => (super.noSuchMethod(
        Invocation.method(
          #resumeAudio,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> stopAudio() => (super.noSuchMethod(
        Invocation.method(
          #stopAudio,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> toggleAudioPlayPause(_i6.Devocional? devocional) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleAudioPlayPause,
          [devocional],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<String>> getAvailableLanguages() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableLanguages,
          [],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<List<String>> getAvailableVoices() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableVoices,
          [],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<List<String>> getVoicesForLanguage(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVoicesForLanguage,
          [language],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<void> setTtsLanguage(String? language) => (super.noSuchMethod(
        Invocation.method(
          #setTtsLanguage,
          [language],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setTtsVoice(Map<String, String>? voice) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTtsVoice,
          [voice],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setTtsSpeechRate(double? rate) => (super.noSuchMethod(
        Invocation.method(
          #setTtsSpeechRate,
          [rate],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void startDevocionalTracking(
    String? devocionalId, {
    _i9.ScrollController? scrollController,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #startDevocionalTracking,
          [devocionalId],
          {#scrollController: scrollController},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseTracking() => super.noSuchMethod(
        Invocation.method(
          #pauseTracking,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumeTracking() => super.noSuchMethod(
        Invocation.method(
          #resumeTracking,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> recordDevocionalRead(String? devocionalId) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordDevocionalRead,
          [devocionalId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void setSelectedLanguage(String? language) => super.noSuchMethod(
        Invocation.method(
          #setSelectedLanguage,
          [language],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSelectedVersion(String? version) => super.noSuchMethod(
        Invocation.method(
          #setSelectedVersion,
          [version],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isFavorite(_i6.Devocional? devocional) => (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [devocional],
        ),
        returnValue: false,
      ) as bool);

  @override
  void toggleFavorite(
    _i6.Devocional? devocional,
    _i9.BuildContext? context,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [
            devocional,
            context,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> reloadFavoritesFromStorage() => (super.noSuchMethod(
        Invocation.method(
          #reloadFavoritesFromStorage,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setInvitationDialogVisibility(bool? shouldShow) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInvitationDialogVisibility,
          [shouldShow],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> hasLocalFile(
    int? year,
    String? language, [
    String? version,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasLocalFile,
          [
            year,
            language,
            version,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> downloadAndStoreDevocionales(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadAndStoreDevocionales,
          [year],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> clearOldLocalFiles() => (super.noSuchMethod(
        Invocation.method(
          #clearOldLocalFiles,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  bool isLanguageSupported(String? language) => (super.noSuchMethod(
        Invocation.method(
          #isLanguageSupported,
          [language],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<bool> downloadCurrentYearDevocionales() => (super.noSuchMethod(
        Invocation.method(
          #downloadCurrentYearDevocionales,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> downloadDevocionalesForYear(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadDevocionalesForYear,
          [year],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> downloadDevocionalesWithProgress({
    required dynamic Function(double)? onProgress,
    int? startYear = 2025,
    int? endYear = 2026,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadDevocionalesWithProgress,
          [],
          {
            #onProgress: onProgress,
            #startYear: startYear,
            #endYear: endYear,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> hasCurrentYearLocalData() => (super.noSuchMethod(
        Invocation.method(
          #hasCurrentYearLocalData,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> hasTargetYearsLocalData() => (super.noSuchMethod(
        Invocation.method(
          #hasTargetYearsLocalData,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> forceRefreshFromAPI() => (super.noSuchMethod(
        Invocation.method(
          #forceRefreshFromAPI,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void clearDownloadStatus() => super.noSuchMethod(
        Invocation.method(
          #clearDownloadStatus,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forceUIUpdate() => super.noSuchMethod(
        Invocation.method(
          #forceUIUpdate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void speakDevocional(String? s) => super.noSuchMethod(
        Invocation.method(
          #speakDevocional,
          [s],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalizationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationProvider extends _i1.Mock
    implements _i10.LocalizationProvider {
  MockLocalizationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Locale get currentLocale => (super.noSuchMethod(
        Invocation.getter(#currentLocale),
        returnValue: _FakeLocale_1(
          this,
          Invocation.getter(#currentLocale),
        ),
      ) as _i3.Locale);

  @override
  List<_i3.Locale> get supportedLocales => (super.noSuchMethod(
        Invocation.getter(#supportedLocales),
        returnValue: <_i3.Locale>[],
      ) as List<_i3.Locale>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> changeLanguage(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #changeLanguage,
          [languageCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  String translate(
    String? key, [
    Map<String, dynamic>? params,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #translate,
          [
            key,
            params,
          ],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #translate,
            [
              key,
              params,
            ],
          ),
        ),
      ) as String);

  @override
  String getTtsLocale() => (super.noSuchMethod(
        Invocation.method(
          #getTtsLocale,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getTtsLocale,
            [],
          ),
        ),
      ) as String);

  @override
  String getLanguageName(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getLanguageName,
          [languageCode],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguageName,
            [languageCode],
          ),
        ),
      ) as String);

  @override
  Map<String, String> getAvailableLanguages() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableLanguages,
          [],
        ),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i11.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i12.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i12.Uint8List>.value(_i12.Uint8List(0)),
      ) as _i8.Future<_i12.Uint8List>);

  @override
  _i8.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
