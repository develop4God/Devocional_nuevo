pipeline {
    agent any
    environment {
        FLUTTER_HOME = "/opt/flutter"
        ANDROID_SDK_ROOT = "/home/jenkins/Android/Sdk"
        ANDROID_HOME = "/home/jenkins/Android/Sdk"
        JAVA_HOME = "/usr/lib/jvm/java-17-openjdk-amd64"
        GRADLE_OPTS = '-Dorg.gradle.jvmargs="-Xmx1500m -XX:MaxMetaspaceSize=384m -XX:+HeapDumpOnOutOfMemoryError"' // Eliminado -Dorg.gradle.daemon=false para permitir el uso del daemon y la cach√©
        ORG_GRADLE_PROJECT_android_useAndroidX = 'true'
        GRADLE_USER_HOME = "${WORKSPACE}/.gradle"
    }
    options {
        timeout(time: 15, unit: 'MINUTES')
    }
    stages {
        stage('Check preliminaries') {
            steps {
                echo 'Verificando entorno...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                    "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                    "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                    "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                    "PATH+JAVA=${JAVA_HOME}/bin"
                ]) {
                    sh '''
                        which flutter
                        flutter --version
                        which java
                        java --version
                    '''
                }
            }
        }
        stage('Diagn√≥stico de usuario y permisos') {
            steps {
                sh '''
                    echo "Usuario actual: $(whoami)"
                    echo "Grupos: $(groups)"
                    ls -ld "${WORKSPACE}"
                    touch prueba_pipeline.txt
                    echo "OK: Jenkins puede crear archivos en el workspace"
                    rm prueba_pipeline.txt
                '''
            }
        }
        stage('Validar Keystore') {
            steps {
                script {
                    withCredentials([
                        file(credentialsId: 'UPLOAD_KEYSTORE_FILE', variable: 'KEYSTORE_PATH'),
                        string(credentialsId: 'KEYSTORE_STORE_PASSWORD', variable: 'KEYSTORE_STORE_PASSWORD'),
                        string(credentialsId: 'KEYSTORE_KEY_ALIAS', variable: 'KEYSTORE_KEY_ALIAS'),
                        string(credentialsId: 'KEYSTORE_KEY_PASSWORD', variable: 'KEYSTORE_KEY_PASSWORD')
                    ]) {
                        sh '''
                            echo "Ruta real del keystore temporal: ${KEYSTORE_PATH}"
                            ls -la "${KEYSTORE_PATH}"

                            echo "Validando keystore directamente..."
                            keytool -list -v -keystore "${KEYSTORE_PATH}" \\
                                    -storepass "$KEYSTORE_STORE_PASSWORD" \\
                                    -alias "$KEYSTORE_KEY_ALIAS" \\
                                    -keypass "$KEYSTORE_KEY_PASSWORD"
                            RET=$?
                            if [ $RET -eq 0 ]; then
                                echo "‚úÖ Keystore v√°lido"
                            else
                                echo "‚ùå Fall√≥ la validaci√≥n del keystore (exit code: $RET)"
                                exit 1 // Falla la compilaci√≥n si el keystore no es v√°lido
                            fi
                        '''
                    }
                }
            }
        }
        stage('Build App Bundle Release') {
            steps {
                // Envuelve withCredentials y withEnv dentro de script para replicar la estructura del micro-job exitoso
                script {
                    withCredentials([
                        file(credentialsId: 'UPLOAD_KEYSTORE_FILE', variable: 'KEYSTORE_PATH'),
                        string(credentialsId: 'KEYSTORE_STORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
                        string(credentialsId: 'KEYSTORE_KEY_PASSWORD', variable: 'KEY_PASSWORD'),
                        string(credentialsId: 'KEYSTORE_KEY_ALIAS', variable: 'KEY_ALIAS')
                    ]) {
                        withEnv([
                            "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                            "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                            "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                            "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                            "PATH+JAVA=${JAVA_HOME}/bin"
                        ]) {
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                // --- INICIO DE CAMBIOS: Contenido exacto del 'sh' del micro-job exitoso ---
                                sh '''
                                    echo "Realizando limpieza profunda y obteniendo dependencias antes de la compilaci√≥n..."
                                    pkill -9 -f gradle || true
                                    pkill -9 -f GradleDaemon || true
                                    rm -rf ~/.gradle/daemon/ || true
                                    flutter clean || true
                                    flutter pub get || true
                                    echo "Limpieza y obtenci√≥n de dependencias completadas."
                                    free -h
                                    echo "Iniciando 'flutter build appbundle'..."
                                    flutter build appbundle --release --no-tree-shake-icons --verbose
                                    echo "Comando 'flutter build appbundle' finalizado. Analizando salida..."
                                    free -h
                                '''
                                // --- FIN DE CAMBIOS: Contenido exacto del 'sh' del micro-job exitoso ---

                                // --- L√≥gica de b√∫squeda din√°mica y depuraci√≥n de artefactos (ya estaba, se mantiene) ---
                                echo "--- Buscando artefactos de salida despu√©s de la compilaci√≥n ---"

                                // Buscar el AAB de release
                                def aabPath = sh(script: "find \"${WORKSPACE}/build/app/outputs/bundle/release\" -name \"*.aab\" -type f -print -quit || true", returnStdout: true).trim()
                                if (aabPath) {
                                    echo "üéâ App Bundle de Release encontrado en: ${aabPath}"
                                    sh "ls -lh \"${aabPath}\""
                                    env.AAB_FINAL_PATH = aabPath
                                } else {
                                    echo "‚ö†Ô∏è App Bundle de Release (*.aab) NO encontrado en build/app/outputs/bundle/release."
                                    echo "Realizando b√∫squeda m√°s amplia de *.aab en build/app/outputs/bundle/:"
                                    sh "find \"${WORKSPACE}/build/app/outputs/bundle\" -name \"*.aab\" || true"
                                    env.AAB_FINAL_PATH = ""
                                }

                                echo ""

                                // Buscar el APK de release
                                def apkPath = sh(script: "find \"${WORKSPACE}/build/app/outputs/flutter-apk\" -name \"*.apk\" -type f -print -quit || true", returnStdout: true).trim()
                                if (apkPath) {
                                    echo "üéâ APK de Release encontrado en: ${apkPath}"
                                    sh "ls -lh \"${apkPath}\""
                                    env.APK_FINAL_PATH = apkPath
                                } else {
                                    echo "‚ö†Ô∏è APK de Release (*.apk) NO encontrado en build/app/outputs/flutter-apk."
                                    echo "Realizando b√∫squeda m√°s amplia de *.apk en build/app/outputs/flutter-apk/:"
                                    sh "find \"${WORKSPACE}/build/app/outputs/flutter-apk\" -name \"*.apk\" || true"
                                    env.APK_FINAL_PATH = ""
                                }

                                echo "--- Fin de b√∫squeda de artefactos ---"
                            }
                        }
                    }
                }
            }
        }
        // --- ELIMINADA LA ETAPA 'Verify Artifacts' (ya estaba eliminada, se mantiene as√≠) ---
        stage('Final Cleanup') {
            steps {
                sh '''
                    pkill -9 -f gradle || true
                    pkill -9 -f GradleDaemon || true
                    rm -rf ~/.gradle/daemon/ ~/.gradle/caches/ .gradle/ build/.gradle/ || true
                    free -h
                '''
            }
        }
    }
    post {
        always {
            echo 'üèÅ Pipeline cr√≠tico finalizado.'
            sh '''
                pkill -f gradle || true
                pkill -f GradleDaemon || true
                free -h
            '''
            // --- INICIO DE CAMBIOS PARA ARCHIVAR DIN√ÅMICAMENTE (ya estaban, se mantienen) ---
            script {
                def artifactsToArchive = []
                if (env.AAB_FINAL_PATH) {
                    artifactsToArchive.add(env.AAB_FINAL_PATH)
                }
                if (env.APK_FINAL_PATH) {
                    artifactsToArchive.add(env.APK_FINAL_PATH)
                }

                if (artifactsToArchive) {
                    echo "Archivando artefactos encontrados: ${artifactsToArchive.join(', ')}"
                    archiveArtifacts artifacts: artifactsToArchive.join(','),
                                     fingerprint: true,
                                     allowEmptyArchive: true
                } else {
                    echo "No se encontraron artefactos .aab o .apk espec√≠ficos para archivar."
                }
                archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
            }
            // --- FIN DE CAMBIOS PARA ARCHIVAR DIN√ÅMICAMENTE ---
        }
        success {
            echo 'üéâ Build completado exitosamente'
        }
        failure {
            echo 'üí• Build fall√≥'
            sh '''
                free -h
                df -h .
                ps aux | grep gradle || true
                ls -la build/ || true
                dmesg | tail -20 || true
            '''
        }
    }
}
