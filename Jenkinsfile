pipeline {
    agent any

    environment {
        // Variables de entorno limpias - SIN modificar PATH aqu√≠
        FLUTTER_HOME = "/opt/flutter"
        ANDROID_SDK_ROOT = "/home/jenkins/Android/Sdk"
        ANDROID_HOME = "/home/jenkins/Android/Sdk"
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-amd64"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo 'üîÑ Obteniendo c√≥digo fuente...'
                checkout scm
            }
        }

        stage('Verificar Entorno') {
            steps {
                echo 'üîç Verificando entorno (basado en micro-jobs exitosos)...'
                // Usar withEnv como en la soluci√≥n que funcion√≥
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                    "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                    "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                    "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                    "PATH+JAVA=${JAVA_HOME}/bin"
                ]) {
                    sh '''
                        echo "=== VERIFICACI√ìN DE HERRAMIENTAS CR√çTICAS ==="
                        echo "PATH actual: $PATH"
                        
                        echo "üì± Verificando Android SDK..."
                        which sdkmanager
                        sdkmanager --version
                        
                        echo "üõ†Ô∏è Verificando componentes Android..."
                        ls -la "$ANDROID_SDK_ROOT/platforms/" || echo "‚ùå Platforms no encontrado"
                        ls -la "$ANDROID_SDK_ROOT/build-tools/" || echo "‚ùå Build-tools no encontrado"
                        ls -la "$ANDROID_SDK_ROOT/platform-tools/" || echo "‚ùå Platform-tools no encontrado"
                        
                        echo "üöÄ Verificando Flutter..."
                        which flutter
                        flutter --version
                        
                        echo "‚òï Verificando Java..."
                        which java
                        java --version
                        
                        echo "‚úÖ Verificaci√≥n de entorno completada"
                    '''
                }
            }
        }

        stage('Configurar Flutter') {
            steps {
                echo '‚öôÔ∏è Configurando Flutter para Android...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                    "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                    "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                    "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                    "PATH+JAVA=${JAVA_HOME}/bin"
                ]) {
                    sh '''
                        echo "=== CONFIGURACI√ìN DE FLUTTER ==="
                        # Configurar Flutter para usar nuestro Android SDK
                        flutter config --android-sdk "$ANDROID_SDK_ROOT"
                        
                        # Verificar configuraci√≥n
                        echo "üìã Verificando configuraci√≥n aplicada..."
                        flutter config
                        
                        # Flutter doctor espec√≠fico para Android
                        echo "üè• Ejecutando Flutter Doctor para Android..."
                        flutter doctor --android-licenses || echo "Licencias ya aceptadas"
                        flutter doctor -v
                    '''
                }
            }
        }

        stage('Limpiar y Obtener Dependencias') {
            steps {
                echo 'üßπ Limpiando proyecto y obteniendo dependencias...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin"
                ]) {
                    sh '''
                        echo "=== LIMPIEZA Y DEPENDENCIAS ==="
                        # Limpiar builds anteriores
                        flutter clean
                        
                        # Verificar que existe pubspec.yaml
                        if [ ! -f "pubspec.yaml" ]; then
                            echo "‚ùå Error: pubspec.yaml no encontrado. ¬øEs un proyecto Flutter v√°lido?"
                            exit 1
                        fi
                        
                        # Obtener dependencias
                        flutter pub get
                        
                        echo "‚úÖ Dependencias obtenidas exitosamente"
                    '''
                }
            }
        }

        stage('Ejecutar Tests') {
            steps {
                echo 'üß™ Ejecutando tests...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin"
                ]) {
                    script {
                        // Los tests que fallan no rompen el pipeline
                        def testResult = sh(script: 'flutter test', returnStatus: true)
                        if (testResult != 0) {
                            unstable('Tests fallaron pero continuamos el build')
                        }
                    }
                }
            }
        }

        stage('Build APK Debug') {
            steps {
                echo 'üî® Construyendo APK Debug...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                    "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                    "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                    "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                    "PATH+JAVA=${JAVA_HOME}/bin"
                ]) {
                    sh '''
                        echo "=== BUILD APK DEBUG ==="
                        flutter build apk --debug
                        
                        # Verificar que el APK se cre√≥
                        APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
                        if [ -f "$APK_PATH" ]; then
                            echo "‚úÖ APK Debug creado exitosamente"
                            ls -lh "$APK_PATH"
                        else
                            echo "‚ùå Error: APK Debug no encontrado"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Build App Bundle Release') {
            steps {
                echo 'üì¶ Construyendo App Bundle Release...'
                withEnv([
                    "PATH+FLUTTER=${FLUTTER_HOME}/bin",
                    "PATH+CMDLINE=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin",
                    "PATH+PLATFORM_TOOLS=${ANDROID_SDK_ROOT}/platform-tools",
                    "PATH+BUILD_TOOLS=${ANDROID_SDK_ROOT}/build-tools/34.0.0",
                    "PATH+JAVA=${JAVA_HOME}/bin"
                ]) {
                    sh '''
                        echo "=== BUILD APP BUNDLE RELEASE ==="
                        flutter build appbundle --release
                        
                        # Verificar que el AAB se cre√≥
                        AAB_PATH="build/app/outputs/bundle/release/app-release.aab"
                        if [ -f "$AAB_PATH" ]; then
                            echo "‚úÖ App Bundle Release creado exitosamente"
                            ls -lh "$AAB_PATH"
                        else
                            echo "‚ùå Error: App Bundle Release no encontrado"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('An√°lisis Final') {
            steps {
                echo 'üìä Realizando an√°lisis final...'
                sh '''
                    echo "=== AN√ÅLISIS FINAL ==="
                    echo "üìÅ Estructura de builds generados:"
                    find build/app/outputs -name "*.apk" -o -name "*.aab" | while read file; do
                        echo "  üì± $(basename "$file"): $(du -h "$file" | cut -f1)"
                    done
                    
                    echo "‚úÖ An√°lisis completado"
                '''
            }
        }
    }

    post {
        always {
            echo 'üèÅ Pipeline finalizado.'

            script {
                // Archivar artefactos si existen
                try {
                    archiveArtifacts artifacts: 'build/app/outputs/flutter-apk/*.apk,build/app/outputs/bundle/release/*.aab', 
                                   fingerprint: true, 
                                   allowEmptyArchive: true
                    echo 'üìÅ Artefactos archivados exitosamente'
                } catch (Exception e) {
                    echo "‚ö†Ô∏è No se pudieron archivar algunos artefactos: ${e.getMessage()}"
                }
            }
        }

        success {
            echo '''
            üéâ ¬°PIPELINE EXITOSO! 
            
            ‚úÖ Builds generados correctamente:
            ‚Ä¢ APK Debug para testing
            ‚Ä¢ App Bundle Release para Play Store
            
            üöÄ Artefactos disponibles en la secci√≥n de artifacts
            
            üôå ¬°Gloria a Dios por esta victoria!
            '''
        }

        failure {
            echo '''
            ‚ùå Pipeline fall√≥. Revisa los logs para identificar el problema.
            
            üîç Pasos de debugging recomendados:
            1. Verificar que el repositorio tenga un proyecto Flutter v√°lido
            2. Revisar los logs de la etapa que fall√≥
            3. Confirmar que las dependencias en pubspec.yaml son correctas
            4. Verificar permisos de archivos si es necesario
            
            üí° Recuerda: Los micro-jobs demuestran que el entorno funciona correctamente
            '''
        }

        unstable {
            echo '''
            ‚ö†Ô∏è Pipeline completado con warnings (probablemente tests fallidos).
            
            ‚úÖ Los builds se generaron correctamente
            üß™ Revisa los tests que fallaron si es necesario
            '''
        }
    }
}
